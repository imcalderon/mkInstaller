"""An interactive console for the installer creation process (Python 3 version)

The interactive console is a utility to aid in working with the installer
creation process, providing a host of useful functions to help debug errors.
"""
import cmd
import sys
import subprocess
import os

class InstallerConsole(cmd.Cmd):
    prompt = "\nInstaller:>>"

    def __init__(self, stateobj):
        self._stateobj = stateobj
        super().__init__()

    def help_pyth(self): print("\npyth:\n\tExecute a python command\n")
    def help_showenv(self): print("\nshowenv:\n\tShows the current environment variables\n")
    def help_showgoals(self): print("\nshowgoals:\n\tShows the current list of goals\n")
    def help_nextaction(self): print("\nnextaction:\n\tRuns the next action in the goal list\n")
    def help_exception(self): print("\nexception:\n\tSimulate an error and throw an exception\n")
    def help_export(self): print("\nexport:\n\tExport the current installer state\n")
    def help_reset(self): print("\nreset:\n\tReset the install process (lose any current progress)\n")
    def help_resume(self): print("\nresume:\n\tAttempt to resume the install process from the last successful point\n")
    def help_cmd(self): print("\ncmd:\n\tLaunch a console window setup in the current install directory\n")
    def help_shell(self): print("\nshell:\n\tExecutes commands through command-shell (can also prefix with !)\n")
    def help_exit(self): print("\nexit:\n\tExits interactive console\n")

    def do_pyth(self, args):
        print("Running Python Commands...")
        try:
            exec(args)
        finally:
            print("Finished...")

    def do_showenv(self, args):
        args = args.split()
        if len(args) == 1:
            if args[0] in self._stateobj.library.env:
                print(f"ENV['{args[0].upper()}'] = {getattr(self._stateobj.library.env, args[0])}")
            else:
                print(f"ENV['{args[0].upper()}'] UNDEFINED")
        else:
            print(self._stateobj.library.dumpenv_to_string())

    def do_showgoals(self, args):
        print("\nCurrent Goals:")
        for ix, goal in enumerate(self._stateobj.goals):
            if goal in self._stateobj.goal_map:
                print(f"{ix}: {goal} -> {self._stateobj.goal_map[goal]}")

    def do_export(self, args):
        filename = "installer_state.xml"
        if args:
            filename = args.split()[0]
        print(f"Exporting object to filename: {filename}")
        self._stateobj.export(filename)

    def do_nextaction(self, args):
        self._stateobj.next_action()

    def do_exception(self, args):
        raise Exception("Simulated exception generated by interactive console.")

    def do_reset(self, args):
        print("unimplemented.")

    def do_resume(self, args):
        print("unimplemented.")

    def do_cmd(self, args):
        subprocess.call(["cmd", "/k"], shell=True)

    def do_shell(self, args):
        subprocess.call(args, shell=True)

    def do_exit(self, args):
        return True
